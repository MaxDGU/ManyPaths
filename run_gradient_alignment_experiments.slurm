#!/bin/bash
#SBATCH --job-name=grad_align_experiments
#SBATCH --output=gradient_alignment_experiments_%j.out
#SBATCH --error=gradient_alignment_experiments_%j.err
#SBATCH --mail-type=FAIL,END
#SBATCH --mail-user=mg7411@princeton.edu
#SBATCH --time=12:00:00
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4
#SBATCH --mem=16G
#SBATCH --gres=gpu:1
#SBATCH --partition=pli
#SBATCH --account=nam

# Load necessary modules (matching working baseline configuration)
echo "SLURM SCRIPT: Starting gradient alignment experiments"
echo "Host: $(hostname), Working Dir: $(pwd), Date: $(date)"
mkdir -p logs
module purge
module load anaconda3/2023.3  # Using the version confirmed to be available
if [ $? -ne 0 ]; then echo "ERROR: Failed to load anaconda3/2023.3 "; exit 1; fi
echo "Loaded anaconda3/2023.3 "
module load cudatoolkit/11.8
if [ $? -ne 0 ]; then echo "ERROR: Failed to load cudatoolkit/11.8"; exit 1; fi
echo "Loaded cudatoolkit/11.8"

# Activate conda environment (matching baseline configuration)
CONDA_ENV_NAME="tensorflow"
conda activate "${CONDA_ENV_NAME}"
if [ $? -ne 0 ]; then echo "ERROR: Failed to activate conda env ${CONDA_ENV_NAME}"; exit 1; fi
echo "Activated conda env: ${CONDA_ENV_NAME} (Python: $(which python))"

# Change to working directory
PROJECT_DIR="/scratch/gpfs/mg7411/ManyPaths"
cd $PROJECT_DIR || exit 1

# Print system information
echo "============================================"
echo "Job started at: $(date)"
echo "Job ID: $SLURM_JOB_ID"
echo "Node: $SLURM_JOB_NODELIST"
echo "Working directory: $(pwd)"
echo "Python version: $(python --version)"
echo "PyTorch version: $(python -c 'import torch; print(torch.__version__)')"
echo "CUDA available: $(python -c 'import torch; print(torch.cuda.is_available())')"
echo "============================================"

# Run a quick test to verify basic functionality (but proceed regardless)
echo "Running quick functionality test..."
python della_test_gradient_alignment.py
TEST_EXIT_CODE=$?

if [ $TEST_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Test passed completely - training and gradient alignment both work!"
else
    echo "‚ö†Ô∏è  Test had issues (likely gradient alignment), but proceeding with experiments anyway..."
    echo "   - Training pipeline works (we saw successful epochs in output)"
    echo "   - We'll focus on alternative mechanistic explanations"
fi

echo ""
echo "============================================"
echo "üöÄ PROCEEDING WITH FULL EXPERIMENTS"
echo "============================================"
echo "Starting comprehensive K=1 vs K=10 experiments..."
echo "Even without gradient alignment, we'll get:"
echo "- K=1 vs K=10 performance comparisons"
echo "- Learning trajectory data"  
echo "- Model checkpoints for weight analysis"
echo "- Statistical significance data"
echo ""

# Run the full experiments regardless of test outcome
python della_full_gradient_experiments.py
EXPERIMENTS_EXIT_CODE=$?

echo "============================================"
echo "Job completed at: $(date)"
echo "Experiments exit code: $EXPERIMENTS_EXIT_CODE"
echo "============================================"

# Exit with the experiments exit code (not the test exit code)
exit $EXPERIMENTS_EXIT_CODE
